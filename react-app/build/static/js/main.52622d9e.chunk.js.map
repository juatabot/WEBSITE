{"version":3,"sources":["slideshow/Image.js","slideshow/Slideshow.js","menu/Menu.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","state","src","console","log","this","getImageURL","then","newurl","setState","url","fetch","response","blob","images","URL","createObjectURL","class","onClick","nextPhoto","React","Component","Slideshow","id","TITLE","Page","href","link","ContactLink","target","MailToLink","mailto","Menu","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qUAsCiBA,G,wDAlCb,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEC,IAAK,MAFL,E,gEAKE,IAAD,OAChBC,QAAQC,IAAI,qBACZC,KAAKC,YAAY,8BAA8BC,MAAK,SAAAC,GAChD,EAAKC,SAAS,CAAEP,IAAKM,S,kCAIjBE,GAER,OADAP,QAAQC,IAAI,eACLO,MAAMD,GACRH,MAAK,SAAAK,GAAQ,OAAIA,EAASC,UAC1BN,MAAK,SAAAO,GACF,OAAOC,IAAIC,gBAAgBF,Q,kCAI1B,IAAD,OAERT,KAAKC,YAAY,uBAAuBC,MAAK,SAAAC,GACzC,EAAKC,SAAS,CAAEP,IAAKM,OAEzBL,QAAQC,IAAI,e,+BAGN,IAAD,OACL,OACI,yBAAKa,MAAM,aAAaC,QAAS,kBAAM,EAAKC,aAAajB,IAAKG,KAAKJ,MAAMC,U,GAhCjEkB,IAAMC,YCSXC,MARf,WACI,OACI,yBAAKL,MAAM,mBACP,kBAAC,EAAD,CAAOM,GAAG,YCJhBC,G,MAAQ,yCAkBd,SAASC,EAAKzB,GACZ,OACE,uBAAG0B,KAAM1B,EAAM2B,KAAMV,MAAM,QAAQjB,EAAM2B,MAI7C,SAASC,EAAY5B,GACnB,IAAMU,EAAM,WAAaV,EAAM2B,KAC/B,OACE,uBAAGD,KAAMhB,EAAKmB,OAAO,SAASZ,MAAM,QAAQjB,EAAM2B,MAItD,SAASG,EAAW9B,GAClB,IAAM+B,EAAS,WAAa/B,EAAM2B,KAClC,OACE,uBAAGD,KAAMK,EAAQF,OAAO,SAASZ,MAAM,QAAQjB,EAAM2B,MAI1CK,MApCf,WACE,OACE,yBAAKf,MAAM,cACRO,EACD,yBAAKP,MAAM,SACT,kBAACQ,EAAD,CAAME,KAAK,aACX,kBAACF,EAAD,CAAME,KAAK,WAEb,yBAAKV,MAAM,eACT,kBAACW,EAAD,CAAaD,KAAK,2BAClB,kBAACG,EAAD,CAAYH,KAAK,6B,MCDVM,MATf,WACI,OACI,yBAAKhB,MAAM,OACP,yBAAKA,MAAM,QAAX,IAAoBe,KACpB,yBAAKf,MAAM,uBAAX,IAAmCK,OCG3BY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.52622d9e.chunk.js","sourcesContent":["import React from 'react';\nimport './Image.css';\n\nclass Image extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { src: null };\n    }\n\n    componentDidMount() {\n        console.log(\"componentDidMount\")\n        this.getImageURL('/api/slideshow/first-image').then(newurl => {\n            this.setState({ src: newurl })\n        });\n    }\n\n    getImageURL(url) {\n        console.log(\"getImageURL\")\n        return fetch(url)\n            .then(response => response.blob())\n            .then(images => {\n                return URL.createObjectURL(images)\n            })\n    }\n\n    nextPhoto() {\n        \n        this.getImageURL('/api/slideshow/next').then(newurl => {\n            this.setState({ src: newurl })\n        });\n        console.log(\"nextPhoto\")\n    }\n\n    render() {\n        return (\n            <img class=\"responsive\" onClick={() => this.nextPhoto()} src={this.state.src}></img>\n        );\n    }\n} export default Image;\n","import React from 'react';\nimport './Slideshow.css';\nimport Image from './Image';\n\nfunction Slideshow() {\n    return (\n        <div class=\"slideshow-image\">\n            <Image id='image'></Image>\n        </div>\n    );\n}\n\nexport default Slideshow;\n","import React from 'react';\nimport './Menu.css';\n\nconst TITLE = <h1>JUATABOT</h1>;\n\nfunction Menu() {\n  return (\n    <div class=\"menuColumn\">\n      {TITLE}\n      <div class=\"pages\">\n        <Page link=\"memories\"></Page>\n        <Page link=\"about\"></Page>\n      </div>\n      <div class=\"contactInfo\">\n        <ContactLink link=\"instagram.com/juatabot\"></ContactLink>\n        <MailToLink link=\"tan.hen@husky.neu.edu\"></MailToLink>\n      </div>\n    </div>\n  )\n}\n\nfunction Page(props) {\n  return (\n    <a href={props.link} class=\"link\">{props.link}</a>\n  )\n}\n\nfunction ContactLink(props) {\n  const url = \"https://\" + props.link;\n  return (\n    <a href={url} target=\"_blank\" class=\"link\">{props.link}</a>\n  )\n}\n\nfunction MailToLink(props) {\n  const mailto = \"mailto: \" + props.link;\n  return (\n    <a href={mailto} target=\"_blank\" class=\"link\">{props.link}</a>\n  )\n}\n\nexport default Menu;\n","import React from 'react';\nimport Slideshow from './slideshow/Slideshow';\nimport Menu from './menu/Menu';\nimport './App.css'\n\nfunction App() {\n    return (\n        <div class=\"app\">\n            <div class='menu'> {Menu()}</div>\n            <div class='slideshow-container'> {Slideshow()}</div>\n        </div>\n    );  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}